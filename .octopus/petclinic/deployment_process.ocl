step "approve-production-deployment" {
    condition = "Variable"
    name = "Approve Production Deployment"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Trigger.Id}True#{/unless}"
    }

    action {
        action_type = "Octopus.Manual"
        environments = ["production"]
        is_required = true
        notes = "Require approval from someone with the appropriate permissions."
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Please add approval notes here."
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "check-for-namespace" {
    name = "Check for namespace (Azure discovery)"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        notes = <<-EOT
                Create the target namespace if it does not exist.
                
                This step does cloud target discovery for AKS clusters.
                EOT
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Get existing namespaces
                Write-Host "Retrieving namespaces ..."
                $namespaces = (kubectl get namespaces -o JSON | ConvertFrom-Json)
                
                # Check to see if namespace exists
                if ($null -eq ($namespaces.Items | Where-Object {$_.metadata.name -eq $OctopusParameters["PetClinic.Cluster.Namespace"]}))
                {
                	# Create the namespace
                    Write-Host "Namespace #{PetClinic.Cluster.Namespace} doesn't exist, creating ..."
                    kubectl create namespace $OctopusParameters["PetClinic.Cluster.Namespace"]
                }
                else
                {
                	Write-Host "Namespace #{PetClinic.Cluster.Namespace} already exists, moving on ..."
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = "PetClinic.WorkerPool.Azure"
    }
}

step "deploy-petclinic-helm-chart" {
    name = "Deploy PetClinic Helm Chart"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        notes = "Deploy the PetClinic Helm Chart to the K8s cluster."
        properties = {
            Octopus.Action.Helm.ClientVersion = "V3"
            Octopus.Action.Helm.Namespace = "#{PetClinic.Cluster.Namespace}"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Helm.YamlValues = <<-EOT
                databaseimage:
                  repository: mysql
                  pullPolicy: IfNotPresent
                  tag: "latest"
                  metadataName: "mysql"
                  credentials:
                    root:
                      username: "root"
                      password: "#{PetClinic.MySQL.Root.Password}"
                    petclinic:
                      username: "petclinic"
                      password: "#{PetClinic.MySQL.PetClinic.Password}"
                  memoryRequest: "#{Project.Container.MySql.Memory.Request}"
                  memoryLimit: "#{Project.Container.MySql.Memory.Limit}"
                webimage:
                  tag: "#{Octopus.Action.Package[petclinic-web].PackageVersion}"
                  memoryRequest: "#{Project.Container.Web.Memory.Request}"
                  memoryLimit: "#{Project.Container.Web.Memory.Limit}"
                ingress:
                  enabled: false
                EOT
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.PackageId = "petclinic-chart"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "PetClinic.WorkerPool.Azure"

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "petclinic-chart"
            properties = {
                SelectionMode = "immediate"
            }
        }

        packages "petclinic-web" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = "octopussamples/petclinic-web"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }
    }
}

step "deploy-kubernetes-service-resource" {
    name = "Deploy Kubernetes service resource"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployService"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.Namespace = "#{PetClinic.Cluster.Namespace}"
            Octopus.Action.KubernetesContainers.SelectorLabels = "{\"component\":\"petclinic-web\"}"
            Octopus.Action.KubernetesContainers.ServiceName = "petclinic-load-balancer"
            Octopus.Action.KubernetesContainers.ServicePorts = "[{\"name\":\"http\",\"port\":\"80\",\"targetPort\":\"8080\",\"nodePort\":\"\",\"protocol\":\"TCP\"}]"
            Octopus.Action.KubernetesContainers.ServiceType = "LoadBalancer"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:ubuntu.22.04"
        }
    }
}

step "notify-status-of-deployment" {
    condition = "Always"
    name = "Notify status of deployment"

    action {
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-2547"
            Octopus.Action.Template.Version = "15"
            ssn_Channel = "#{Notification.Slack.Channel}"
            ssn_Color = "#{Notification.Slack.Color}"
            ssn_HookUrl = "#{Notification.Slack.Webhook}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "#{Notification.Slack.Status.Message}"
            ssn_Title = "#{Notification.Slack.Status.Deployment.Title}"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool = "hosted-ubuntu"
    }
}