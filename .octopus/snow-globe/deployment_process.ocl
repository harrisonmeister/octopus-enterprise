step "calculate-deployment-mode" {
    name = "Calculate Deployment Mode"

    action {
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-3268"
            Octopus.Action.Template.Version = "0"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "create-web-app-service" {
    name = "Create Snow Globe service"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        notes = "Create a Load Balancer service for the web app on the target cluster."
        properties = {
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: '#{SnowGlobe.WebApp.ServiceName}'
                  namespace: '#{SnowGlobe.Cluster.Namespace}'
                spec:
                  type: LoadBalancer
                  ports:
                    - name: http
                      port: 80
                      targetPort: #{SnowGlobe.WebApp.HttpPort}
                      protocol: TCP
                    - name: https
                      port: 443
                      targetPort: #{SnowGlobe.WebApp.HttpsPort}
                      protocol: TCP
                  selector:
                    component: sg-web
                    type: main
                
                EOT
            Octopus.Action.KubernetesContainers.DeploymentWait = "NoWait"
            Octopus.Action.KubernetesContainers.Namespace = "#{SnowGlobe.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:5.2.0-ubuntu.22.04"
        }
    }
}

step "run-tests" {
    name = "Run tests"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $version = $OctopusParameters["Octopus.Release.Number"]
                $revision = "#{Octopus.Release.Number | VersionRevision}"
                $moduloResult = $revision % 2
                Write-Host "Revision is: $revision"
                Write-Host "Modulo result is: $moduloResult"
                exit $moduloResult
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "rollback-to-previous-version" {
    condition = "Variable"
    name = "Rollback on failure"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeployOrRedeploy}#{/if}"
    }

    action "rollback-on-failure" {
        properties = {
            DeployOctopusRelease.ApiKey = "#{SnowGlobe.OctopusApiKey}"
            DeployOctopusRelease.Environment = "#{Octopus.Environment.Name}"
            DeployOctopusRelease.Project = "#{Octopus.Project.Name}"
            DeployOctopusRelease.ReleaseNumber = "#{Octopus.Release.CurrentForEnvironment.Number}"
            Octopus.Action.Template.Id = "ActionTemplates-3267"
            Octopus.Action.Template.Version = "4"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/workertools"
        }
    }
}

step "notify-status-of-deployment" {
    condition = "Always"
    name = "Notify status of deployment"
    start_trigger = "StartWithPrevious"

    action {
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-2547"
            Octopus.Action.Template.Version = "15"
            ssn_Channel = "#{Notification.Slack.Channel}"
            ssn_Color = "#{Notification.Slack.Color}"
            ssn_HookUrl = "#{Notification.Slack.Webhook}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "#{Notification.Slack.Status.Message}"
            ssn_Title = "#{Notification.Slack.Status.Deployment.Title}"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool = "hosted-ubuntu"
    }
}