step "notify-deployment-starting" {
    name = "Notify Deployment starting"

    action {
        environments = ["development"]
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-2547"
            Octopus.Action.Template.Version = "15"
            ssn_Channel = "#{Project.Notification.SlackChannel}"
            ssn_Color = "good"
            ssn_HookUrl = "#{Project.Notification.SlackWebhookUrl}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Title = "#{Project.Notification.DeploymentStartedTitle}"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "cyberark-conjur-retrieve-secrets" {
    name = "CyberArk Conjur - Retrieve Secrets"
    properties = {
        Octopus.Action.TargetRoles = "conjur-server"
    }
    start_trigger = "StartWithPrevious"

    action {
        properties = {
            CyberArk.Conjur.RetrieveSecrets.Account = "#{Conjur.Account.Name}"
            CyberArk.Conjur.RetrieveSecrets.ApiKey = "#{Conjur.RetrieveSecrets.Host.ApiKey}"
            CyberArk.Conjur.RetrieveSecrets.Login = "#{Conjur.RetrieveSecrets.Host.Account}"
            CyberArk.Conjur.RetrieveSecrets.PrintVariableNames = "False"
            CyberArk.Conjur.RetrieveSecrets.SecretVariables = <<-EOT
                OctoSecrets/credentials/username | username
                OctoSecrets/credentials/password | password
                OctoSecrets/ssl/private_key  | ssl_key
                EOT
            CyberArk.Conjur.RetrieveSecrets.Url = "#{Conjur.Server.Url}"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Template.Id = "ActionTemplates-2522"
            Octopus.Action.Template.Version = "1"
        }
    }
}

step "mysql-create-database-if-not-exists" {
    name = "MySQL - Create Database If Not Exists"
    start_trigger = "StartWithPrevious"

    action {
        properties = {
            createDatabaseName = "#{Project.MySql.Database.Name}"
            createMySQLServerName = "#{Project.MySql.Server.Name}"
            createPort = "3306"
            createUsername = "#{Project.MySql.Admin.UserName}"
            createUserPassword = "#{Project.MySql.Admin.Password}"
            createUseSSL = "True"
            mySqlAuthenticationMethod = "usernamepassword"
            Octopus.Action.Template.Id = "ActionTemplates-2548"
            Octopus.Action.Template.Version = "7"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "generate-spring-crm-database-changes-info" {
    name = "Generate spring-crm database changes info"

    action {
        environments = ["production"]
        properties = {
            Flyway.Authentication.Method = "usernamepassword"
            Flyway.Command.BaseLineOnMigrate = "false"
            Flyway.Command.OutOfOrder = "false"
            Flyway.Command.SkipExecutingMigrations = "false"
            Flyway.Command.Target = "latest"
            Flyway.Command.Value = "info"
            Flyway.Database.User = "#{Project.MySql.Admin.UserName}"
            Flyway.Database.User.Password = "#{Project.MySql.Admin.Password}"
            Flyway.License.Key = "#{Project.MySql.Flyway.Key}"
            Flyway.Package.Value = "{\"PackageId\":\"springcrm.db\",\"FeedId\":\"octopus-server-built-in\"}"
            Flyway.Target.Url = "#{Project.Database.ConnectionString}"
            Octopus.Action.Template.Id = "ActionTemplates-2549"
            Octopus.Action.Template.Version = "11"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/flyway-workertools:9.21.2-ubuntu.2204"
        }

        packages "Flyway.Package.Value" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "springcrm.db"
            properties = {
                Extract = "True"
                PackageParameterName = "Flyway.Package.Value"
                SelectionMode = "deferred"
            }
        }
    }
}

step "database-changes-approval" {
    name = "Database changes Approval"

    action {
        action_type = "Octopus.Manual"
        environments = ["production"]
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Please ensure that any database changes included in the deployment of this release are reviewed by either a DBA or the QA team and approved here."
            Octopus.Action.Manual.ResponsibleTeamIds = "global/demo-qa-team"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "deploy-spring-crm-database-changes-using-flyway" {
    name = "Deploy spring-crm database changes using Flyway"

    action {
        properties = {
            Flyway.Authentication.Method = "usernamepassword"
            Flyway.Command.BaseLineOnMigrate = "false"
            Flyway.Command.OutOfOrder = "false"
            Flyway.Command.SkipExecutingMigrations = "false"
            Flyway.Command.Target = "latest"
            Flyway.Command.Value = "migrate"
            Flyway.Database.User = "#{Project.MySql.Admin.UserName}"
            Flyway.Database.User.Password = "#{Project.MySql.Admin.Password}"
            Flyway.License.Key = "#{Project.MySql.Flyway.Key}"
            Flyway.Package.Value = "{\"PackageId\":\"springcrm.db\",\"FeedId\":\"octopus-server-built-in\"}"
            Flyway.Target.Url = "#{Project.Database.ConnectionString}"
            Octopus.Action.Template.Id = "ActionTemplates-2549"
            Octopus.Action.Template.Version = "11"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/flyway-workertools:9.21.2-ubuntu.2204"
        }

        packages "Flyway.Package.Value" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "springcrm.db"
            properties = {
                Extract = "True"
                PackageParameterName = "Flyway.Package.Value"
                SelectionMode = "deferred"
            }
        }
    }
}

step "deploy-load-balancer" {
    name = "Deploy Load balancer"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        environments = ["test", "production"]
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "False"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: '#{Project.LB.ServiceName}'
                  namespace: '#{Project.Cluster.Namespace}'
                spec:
                  type: LoadBalancer
                  ports:
                    - name: http
                      port: 80
                      targetPort: #{Project.WebApp.HttpPort}
                      protocol: TCP
                    - name: https
                      port: 443
                      targetPort: #{Project.WebApp.HttpsPort}
                      protocol: TCP
                  selector:
                    component: sc-web
                    type: main
                
                EOT
            Octopus.Action.KubernetesContainers.DeploymentWait = "NoWait"
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/k8s-workertools:1.28.1-ubuntu.2204"
        }
    }
}

step "deploy-spring-crm-to-websphere-liberty" {
    name = "Deploy Spring CRM to WebSphere Liberty"
    properties = {
        Octopus.Action.TargetRoles = "springcrm-web"
    }
    start_trigger = "StartWithPrevious"

    action "deploy-spring-crm-to-websphere-liberty" {
        action_type = "Octopus.JavaArchive"
        name = "Deploy Spring CRM to WebSphere Liberty"
        properties = {
            Octopus.Action.CustomScripts.PostDeploy.ps1 = "Write-Highlight \"[Spring CRM #{Octopus.Deployment.Tenant.Name}-#{Octopus.Environment.Name}](#{Project.Installation.DNS})\""
            Octopus.Action.EnabledFeatures = "Octopus.Features.CustomScripts,Octopus.Features.JsonConfigurationVariables"
            Octopus.Action.JavaArchive.DeployExploded = "False"
            Octopus.Action.Package.CustomInstallationDirectory = "#{Project.Installation.Directory}"
            Octopus.Action.Package.CustomInstallationDirectoryShouldBePurgedBeforeDeployment = "False"
            Octopus.Action.Package.CustomPackageFileName = "springcrm_#{Global.Environment.Abbr}_#{Octopus.Deployment.Tenant.Name | Replace \" \" | Replace \"-\" \"_\"}.war"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.JavaArchiveCompression = "True"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "WEB-INF/classes/spring/datasource-config.xml"
            Octopus.Action.Package.PackageId = "springcrm.web"
            Octopus.Action.Package.UseCustomInstallationDirectory = "True"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "springcrm.web"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }

    action "smoke-test-api-endpoints" {
        name = "Smoke test API endpoints"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Template.Id = "ActionTemplates-2563"
            Octopus.Action.Template.Version = "4"
            smoketest.baseURI = "#{Project.Installation.DNS}"
        }
        worker_pool_variable = ""
    }
}

step "notify-deployment-completed" {
    name = "Notify Deployment completed"

    action {
        environments = ["development"]
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-2547"
            Octopus.Action.Template.Version = "15"
            ssn_Channel = "#{Project.Notification.SlackChannel}"
            ssn_Color = "good"
            ssn_HookUrl = "#{Project.Notification.SlackWebhookUrl}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Title = "#{Project.Notification.DeploymentCompletedTitle}"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool = "hosted-ubuntu"
    }
}